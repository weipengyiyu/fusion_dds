/****************************************************************

  Generated by Eclipse Cyclone DDS IDL to CXX Translator
  File name: /home/titan/wp/fusion_dds/idl/PointCloud2.idl
  Source: PointCloud2.hpp
  Cyclone DDS: v0.11.0

*****************************************************************/
#ifndef DDSCXX_POINTCLOUD2_HPP_9FA392EB84EE6D0E910EFCFF976D2269
#define DDSCXX_POINTCLOUD2_HPP_9FA392EB84EE6D0E910EFCFF976D2269

#include <utility>
#include <cstdint>
#include <vector>
#include <string>

namespace lidar_msgs
{
namespace msg
{
class PointXYZIRT
{
private:
 int16_t x_ = 0;
 int16_t y_ = 0;
 int8_t z_ = 0;
 uint8_t intensity_ = 0;

public:
  PointXYZIRT() = default;

  explicit PointXYZIRT(
    int16_t x,
    int16_t y,
    int8_t z,
    uint8_t intensity) :
    x_(x),
    y_(y),
    z_(z),
    intensity_(intensity) { }

  int16_t x() const { return this->x_; }
  int16_t& x() { return this->x_; }
  void x(int16_t _val_) { this->x_ = _val_; }
  int16_t y() const { return this->y_; }
  int16_t& y() { return this->y_; }
  void y(int16_t _val_) { this->y_ = _val_; }
  int8_t z() const { return this->z_; }
  int8_t& z() { return this->z_; }
  void z(int8_t _val_) { this->z_ = _val_; }
  uint8_t intensity() const { return this->intensity_; }
  uint8_t& intensity() { return this->intensity_; }
  void intensity(uint8_t _val_) { this->intensity_ = _val_; }

  bool operator==(const PointXYZIRT& _other) const
  {
    (void) _other;
    return x_ == _other.x_ &&
      y_ == _other.y_ &&
      z_ == _other.z_ &&
      intensity_ == _other.intensity_;
  }

  bool operator!=(const PointXYZIRT& _other) const
  {
    return !(*this == _other);
  }

};

class PointCloud2
{
private:
 uint32_t height_ = 0;
 uint32_t width_ = 0;
 bool is_dense_ = false;
 double timestamp_ = 0.0;
 uint32_t seq_ = 0;
 std::string frame_id_;
 std::vector<::lidar_msgs::msg::PointXYZIRT> points_;

public:
  PointCloud2() = default;

  explicit PointCloud2(
    uint32_t height,
    uint32_t width,
    bool is_dense,
    double timestamp,
    uint32_t seq,
    const std::string& frame_id,
    const std::vector<::lidar_msgs::msg::PointXYZIRT>& points) :
    height_(height),
    width_(width),
    is_dense_(is_dense),
    timestamp_(timestamp),
    seq_(seq),
    frame_id_(frame_id),
    points_(points) { }

  uint32_t height() const { return this->height_; }
  uint32_t& height() { return this->height_; }
  void height(uint32_t _val_) { this->height_ = _val_; }
  uint32_t width() const { return this->width_; }
  uint32_t& width() { return this->width_; }
  void width(uint32_t _val_) { this->width_ = _val_; }
  bool is_dense() const { return this->is_dense_; }
  bool& is_dense() { return this->is_dense_; }
  void is_dense(bool _val_) { this->is_dense_ = _val_; }
  double timestamp() const { return this->timestamp_; }
  double& timestamp() { return this->timestamp_; }
  void timestamp(double _val_) { this->timestamp_ = _val_; }
  uint32_t seq() const { return this->seq_; }
  uint32_t& seq() { return this->seq_; }
  void seq(uint32_t _val_) { this->seq_ = _val_; }
  const std::string& frame_id() const { return this->frame_id_; }
  std::string& frame_id() { return this->frame_id_; }
  void frame_id(const std::string& _val_) { this->frame_id_ = _val_; }
  void frame_id(std::string&& _val_) { this->frame_id_ = std::move(_val_); }
  const std::vector<::lidar_msgs::msg::PointXYZIRT>& points() const { return this->points_; }
  std::vector<::lidar_msgs::msg::PointXYZIRT>& points() { return this->points_; }
  void points(const std::vector<::lidar_msgs::msg::PointXYZIRT>& _val_) { this->points_ = _val_; }
  void points(std::vector<::lidar_msgs::msg::PointXYZIRT>&& _val_) { this->points_ = std::move(_val_); }

  bool operator==(const PointCloud2& _other) const
  {
    (void) _other;
    return height_ == _other.height_ &&
      width_ == _other.width_ &&
      is_dense_ == _other.is_dense_ &&
      timestamp_ == _other.timestamp_ &&
      seq_ == _other.seq_ &&
      frame_id_ == _other.frame_id_ &&
      points_ == _other.points_;
  }

  bool operator!=(const PointCloud2& _other) const
  {
    return !(*this == _other);
  }

};

}

}

#include "dds/topic/TopicTraits.hpp"
#include "org/eclipse/cyclonedds/topic/datatopic.hpp"

namespace org {
namespace eclipse {
namespace cyclonedds {
namespace topic {

template <> constexpr const char* TopicTraits<::lidar_msgs::msg::PointXYZIRT>::getTypeName()
{
  return "lidar_msgs::msg::PointXYZIRT";
}

template <> constexpr bool TopicTraits<::lidar_msgs::msg::PointXYZIRT>::isKeyless()
{
  return true;
}

#ifdef DDSCXX_HAS_TYPELIB
template<> constexpr unsigned int TopicTraits<::lidar_msgs::msg::PointXYZIRT>::type_map_blob_sz() { return 322; }
template<> constexpr unsigned int TopicTraits<::lidar_msgs::msg::PointXYZIRT>::type_info_blob_sz() { return 100; }
template<> inline const uint8_t * TopicTraits<::lidar_msgs::msg::PointXYZIRT>::type_map_blob() {
  alignas(4) static const uint8_t blob[] = {
 0x6b,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0xf1,  0xad,  0x31,  0x88,  0x30,  0x4d,  0x91,  0xac, 
 0x18,  0xc2,  0xfa,  0xd6,  0x02,  0xca,  0x65,  0x00,  0x53,  0x00,  0x00,  0x00,  0xf1,  0x51,  0x01,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x43,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x03,  0x9d,  0xd4,  0xe4,  0x61,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x03,  0x41,  0x52,  0x90,  0x76,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0c,  0xfb,  0xad,  0xe9,  0xe3,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0d,  0x04,  0xbb,  0x0e,  0xc2,  0x00, 
 0xa8,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0xf2,  0x65,  0x38,  0x0e,  0x8f,  0x88,  0x77,  0xce, 
 0x2f,  0x4e,  0x34,  0x28,  0x2a,  0x70,  0xd8,  0x00,  0x90,  0x00,  0x00,  0x00,  0xf2,  0x51,  0x01,  0x00, 
 0x25,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x1d,  0x00,  0x00,  0x00,  0x6c,  0x69,  0x64,  0x61, 
 0x72,  0x5f,  0x6d,  0x73,  0x67,  0x73,  0x3a,  0x3a,  0x6d,  0x73,  0x67,  0x3a,  0x3a,  0x50,  0x6f,  0x69, 
 0x6e,  0x74,  0x58,  0x59,  0x5a,  0x49,  0x52,  0x54,  0x00,  0x00,  0x00,  0x00,  0x5c,  0x00,  0x00,  0x00, 
 0x04,  0x00,  0x00,  0x00,  0x10,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x03,  0x00, 
 0x02,  0x00,  0x00,  0x00,  0x78,  0x00,  0x00,  0x00,  0x10,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x03,  0x00,  0x02,  0x00,  0x00,  0x00,  0x79,  0x00,  0x00,  0x00,  0x10,  0x00,  0x00,  0x00, 
 0x02,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0c,  0x00,  0x02,  0x00,  0x00,  0x00,  0x7a,  0x00,  0x00,  0x00, 
 0x18,  0x00,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0d,  0x00,  0x0a,  0x00,  0x00,  0x00, 
 0x69,  0x6e,  0x74,  0x65,  0x6e,  0x73,  0x69,  0x74,  0x79,  0x00,  0x00,  0x00,  0x22,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0xf2,  0x65,  0x38,  0x0e,  0x8f,  0x88,  0x77,  0xce,  0x2f,  0x4e,  0x34,  0x28, 
 0x2a,  0x70,  0xd8,  0xf1,  0xad,  0x31,  0x88,  0x30,  0x4d,  0x91,  0xac,  0x18,  0xc2,  0xfa,  0xd6,  0x02, 
 0xca,  0x65, };
  return blob;
}
template<> inline const uint8_t * TopicTraits<::lidar_msgs::msg::PointXYZIRT>::type_info_blob() {
  alignas(4) static const uint8_t blob[] = {
 0x60,  0x00,  0x00,  0x00,  0x01,  0x10,  0x00,  0x40,  0x28,  0x00,  0x00,  0x00,  0x24,  0x00,  0x00,  0x00, 
 0x14,  0x00,  0x00,  0x00,  0xf1,  0xad,  0x31,  0x88,  0x30,  0x4d,  0x91,  0xac,  0x18,  0xc2,  0xfa,  0xd6, 
 0x02,  0xca,  0x65,  0x00,  0x57,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x02,  0x10,  0x00,  0x40,  0x28,  0x00,  0x00,  0x00,  0x24,  0x00,  0x00,  0x00, 
 0x14,  0x00,  0x00,  0x00,  0xf2,  0x65,  0x38,  0x0e,  0x8f,  0x88,  0x77,  0xce,  0x2f,  0x4e,  0x34,  0x28, 
 0x2a,  0x70,  0xd8,  0x00,  0x94,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00, };
  return blob;
}
#endif //DDSCXX_HAS_TYPELIB

template <> constexpr const char* TopicTraits<::lidar_msgs::msg::PointCloud2>::getTypeName()
{
  return "lidar_msgs::msg::PointCloud2";
}

template <> constexpr bool TopicTraits<::lidar_msgs::msg::PointCloud2>::isSelfContained()
{
  return false;
}

template <> constexpr bool TopicTraits<::lidar_msgs::msg::PointCloud2>::isKeyless()
{
  return true;
}

#ifdef DDSCXX_HAS_TYPELIB
template<> constexpr unsigned int TopicTraits<::lidar_msgs::msg::PointCloud2>::type_map_blob_sz() { return 804; }
template<> constexpr unsigned int TopicTraits<::lidar_msgs::msg::PointCloud2>::type_info_blob_sz() { return 148; }
template<> inline const uint8_t * TopicTraits<::lidar_msgs::msg::PointCloud2>::type_map_blob() {
  alignas(4) static const uint8_t blob[] = {
 0x17,  0x01,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0xf1,  0x4a,  0x8e,  0x99,  0xc4,  0xda,  0xe4,  0x84, 
 0x9b,  0x3b,  0x8e,  0xca,  0xd6,  0x87,  0xce,  0x00,  0x96,  0x00,  0x00,  0x00,  0xf1,  0x51,  0x01,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x86,  0x00,  0x00,  0x00,  0x07,  0x00,  0x00,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x07,  0xb4,  0x35,  0xe2,  0x27,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x07,  0xea,  0xae,  0x26,  0xa6,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x01,  0x00,  0x01,  0x40,  0x23,  0x8a,  0xea,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0xd7,  0xe6,  0xd5,  0x5b,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00,  0x01,  0x00,  0x07,  0xe0,  0x68,  0xc2,  0xde,  0x00, 
 0x0c,  0x00,  0x00,  0x00,  0x05,  0x00,  0x00,  0x00,  0x01,  0x00,  0x70,  0x00,  0x4b,  0xb3,  0x9c,  0x5c, 
 0x1e,  0x00,  0x00,  0x00,  0x06,  0x00,  0x00,  0x00,  0x01,  0x00,  0x80,  0xf1,  0x01,  0x00,  0x00,  0xf1, 
 0xad,  0x31,  0x88,  0x30,  0x4d,  0x91,  0xac,  0x18,  0xc2,  0xfa,  0xd6,  0x02,  0xca,  0x65,  0x0a,  0xab, 
 0x81,  0xde,  0xf1,  0xad,  0x31,  0x88,  0x30,  0x4d,  0x91,  0xac,  0x18,  0xc2,  0xfa,  0xd6,  0x02,  0xca, 
 0x65,  0x00,  0x00,  0x00,  0x53,  0x00,  0x00,  0x00,  0xf1,  0x51,  0x01,  0x00,  0x01,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x43,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00,  0x0b,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x03,  0x9d,  0xd4,  0xe4,  0x61,  0x00,  0x0b,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x03,  0x41,  0x52,  0x90,  0x76,  0x00,  0x0b,  0x00,  0x00,  0x00, 
 0x02,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0c,  0xfb,  0xad,  0xe9,  0xe3,  0x00,  0x0b,  0x00,  0x00,  0x00, 
 0x03,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0d,  0x04,  0xbb,  0x0e,  0xc2,  0x00,  0xc0,  0x01,  0x00,  0x00, 
 0x02,  0x00,  0x00,  0x00,  0xf2,  0xee,  0x12,  0x19,  0x64,  0xb7,  0x08,  0x6b,  0x3a,  0xb4,  0xfd,  0x57, 
 0x42,  0xac,  0x09,  0x00,  0x05,  0x01,  0x00,  0x00,  0xf2,  0x51,  0x01,  0x00,  0x25,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x1d,  0x00,  0x00,  0x00,  0x6c,  0x69,  0x64,  0x61,  0x72,  0x5f,  0x6d,  0x73, 
 0x67,  0x73,  0x3a,  0x3a,  0x6d,  0x73,  0x67,  0x3a,  0x3a,  0x50,  0x6f,  0x69,  0x6e,  0x74,  0x43,  0x6c, 
 0x6f,  0x75,  0x64,  0x32,  0x00,  0x00,  0x00,  0x00,  0xd1,  0x00,  0x00,  0x00,  0x07,  0x00,  0x00,  0x00, 
 0x15,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x07,  0x00,  0x07,  0x00,  0x00,  0x00, 
 0x68,  0x65,  0x69,  0x67,  0x68,  0x74,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x07,  0x00,  0x06,  0x00,  0x00,  0x00,  0x77,  0x69,  0x64,  0x74, 
 0x68,  0x00,  0x00,  0x00,  0x17,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x01,  0x00,  0x01,  0x00, 
 0x09,  0x00,  0x00,  0x00,  0x69,  0x73,  0x5f,  0x64,  0x65,  0x6e,  0x73,  0x65,  0x00,  0x00,  0x00,  0x00, 
 0x18,  0x00,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0x00,  0x0a,  0x00,  0x00,  0x00, 
 0x74,  0x69,  0x6d,  0x65,  0x73,  0x74,  0x61,  0x6d,  0x70,  0x00,  0x00,  0x00,  0x12,  0x00,  0x00,  0x00, 
 0x04,  0x00,  0x00,  0x00,  0x01,  0x00,  0x07,  0x00,  0x04,  0x00,  0x00,  0x00,  0x73,  0x65,  0x71,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x17,  0x00,  0x00,  0x00,  0x05,  0x00,  0x00,  0x00,  0x01,  0x00,  0x70,  0x00, 
 0x09,  0x00,  0x00,  0x00,  0x66,  0x72,  0x61,  0x6d,  0x65,  0x5f,  0x69,  0x64,  0x00,  0x00,  0x00,  0x00, 
 0x29,  0x00,  0x00,  0x00,  0x06,  0x00,  0x00,  0x00,  0x01,  0x00,  0x80,  0xf2,  0x01,  0x00,  0x00,  0xf2, 
 0x65,  0x38,  0x0e,  0x8f,  0x88,  0x77,  0xce,  0x2f,  0x4e,  0x34,  0x28,  0x2a,  0x70,  0xd8,  0x00,  0x00, 
 0x07,  0x00,  0x00,  0x00,  0x70,  0x6f,  0x69,  0x6e,  0x74,  0x73,  0x00,  0x00,  0x00,  0xf2,  0x65,  0x38, 
 0x0e,  0x8f,  0x88,  0x77,  0xce,  0x2f,  0x4e,  0x34,  0x28,  0x2a,  0x70,  0xd8,  0x90,  0x00,  0x00,  0x00, 
 0xf2,  0x51,  0x01,  0x00,  0x25,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x1d,  0x00,  0x00,  0x00, 
 0x6c,  0x69,  0x64,  0x61,  0x72,  0x5f,  0x6d,  0x73,  0x67,  0x73,  0x3a,  0x3a,  0x6d,  0x73,  0x67,  0x3a, 
 0x3a,  0x50,  0x6f,  0x69,  0x6e,  0x74,  0x58,  0x59,  0x5a,  0x49,  0x52,  0x54,  0x00,  0x00,  0x00,  0x00, 
 0x5c,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00,  0x10,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x03,  0x00,  0x02,  0x00,  0x00,  0x00,  0x78,  0x00,  0x00,  0x00,  0x10,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x03,  0x00,  0x02,  0x00,  0x00,  0x00,  0x79,  0x00,  0x00,  0x00, 
 0x10,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0c,  0x00,  0x02,  0x00,  0x00,  0x00, 
 0x7a,  0x00,  0x00,  0x00,  0x18,  0x00,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0d,  0x00, 
 0x0a,  0x00,  0x00,  0x00,  0x69,  0x6e,  0x74,  0x65,  0x6e,  0x73,  0x69,  0x74,  0x79,  0x00,  0x00,  0x00, 
 0x40,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0xf2,  0xee,  0x12,  0x19,  0x64,  0xb7,  0x08,  0x6b, 
 0x3a,  0xb4,  0xfd,  0x57,  0x42,  0xac,  0x09,  0xf1,  0x4a,  0x8e,  0x99,  0xc4,  0xda,  0xe4,  0x84,  0x9b, 
 0x3b,  0x8e,  0xca,  0xd6,  0x87,  0xce,  0xf2,  0x65,  0x38,  0x0e,  0x8f,  0x88,  0x77,  0xce,  0x2f,  0x4e, 
 0x34,  0x28,  0x2a,  0x70,  0xd8,  0xf1,  0xad,  0x31,  0x88,  0x30,  0x4d,  0x91,  0xac,  0x18,  0xc2,  0xfa, 
 0xd6,  0x02,  0xca,  0x65, };
  return blob;
}
template<> inline const uint8_t * TopicTraits<::lidar_msgs::msg::PointCloud2>::type_info_blob() {
  alignas(4) static const uint8_t blob[] = {
 0x90,  0x00,  0x00,  0x00,  0x01,  0x10,  0x00,  0x40,  0x40,  0x00,  0x00,  0x00,  0x3c,  0x00,  0x00,  0x00, 
 0x14,  0x00,  0x00,  0x00,  0xf1,  0x4a,  0x8e,  0x99,  0xc4,  0xda,  0xe4,  0x84,  0x9b,  0x3b,  0x8e,  0xca, 
 0xd6,  0x87,  0xce,  0x00,  0x9a,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x1c,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00,  0xf1,  0xad,  0x31,  0x88,  0x30,  0x4d,  0x91,  0xac, 
 0x18,  0xc2,  0xfa,  0xd6,  0x02,  0xca,  0x65,  0x00,  0x57,  0x00,  0x00,  0x00,  0x02,  0x10,  0x00,  0x40, 
 0x40,  0x00,  0x00,  0x00,  0x3c,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00,  0xf2,  0xee,  0x12,  0x19, 
 0x64,  0xb7,  0x08,  0x6b,  0x3a,  0xb4,  0xfd,  0x57,  0x42,  0xac,  0x09,  0x00,  0x09,  0x01,  0x00,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x1c,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00, 
 0xf2,  0x65,  0x38,  0x0e,  0x8f,  0x88,  0x77,  0xce,  0x2f,  0x4e,  0x34,  0x28,  0x2a,  0x70,  0xd8,  0x00, 
 0x94,  0x00,  0x00,  0x00, };
  return blob;
}
#endif //DDSCXX_HAS_TYPELIB

} //namespace topic
} //namespace cyclonedds
} //namespace eclipse
} //namespace org

namespace dds {
namespace topic {

template <>
struct topic_type_name<::lidar_msgs::msg::PointXYZIRT>
{
    static std::string value()
    {
      return org::eclipse::cyclonedds::topic::TopicTraits<::lidar_msgs::msg::PointXYZIRT>::getTypeName();
    }
};

template <>
struct topic_type_name<::lidar_msgs::msg::PointCloud2>
{
    static std::string value()
    {
      return org::eclipse::cyclonedds::topic::TopicTraits<::lidar_msgs::msg::PointCloud2>::getTypeName();
    }
};

}
}

REGISTER_TOPIC_TYPE(::lidar_msgs::msg::PointXYZIRT)
REGISTER_TOPIC_TYPE(::lidar_msgs::msg::PointCloud2)

namespace org{
namespace eclipse{
namespace cyclonedds{
namespace core{
namespace cdr{

template<>
const propvec &get_type_props<::lidar_msgs::msg::PointXYZIRT>();

namespace {
  static const volatile propvec &properties___lidar_msgs__msg__PointXYZIRT = get_type_props<::lidar_msgs::msg::PointXYZIRT>();
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool write(T& streamer, const ::lidar_msgs::msg::PointXYZIRT& instance, const entity_properties_t *props) {
  (void)instance;
  member_id_set member_ids;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.x()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.y()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.z()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 3:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.intensity()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props, member_ids);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool write(S& str, const ::lidar_msgs::msg::PointXYZIRT& instance, key_mode key) {
  const auto &props = get_type_props<::lidar_msgs::msg::PointXYZIRT>();
  str.set_mode(cdr_stream::stream_mode::write, key);
  return write(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool read(T& streamer, ::lidar_msgs::msg::PointXYZIRT& instance, const entity_properties_t *props) {
  (void)instance;
  member_id_set member_ids;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.x()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.y()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.z()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 3:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.intensity()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props, member_ids);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool read(S& str, ::lidar_msgs::msg::PointXYZIRT& instance, key_mode key) {
  const auto &props = get_type_props<::lidar_msgs::msg::PointXYZIRT>();
  str.set_mode(cdr_stream::stream_mode::read, key);
  return read(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool move(T& streamer, const ::lidar_msgs::msg::PointXYZIRT& instance, const entity_properties_t *props) {
  (void)instance;
  member_id_set member_ids;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.x()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.y()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.z()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 3:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.intensity()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props, member_ids);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool move(S& str, const ::lidar_msgs::msg::PointXYZIRT& instance, key_mode key) {
  const auto &props = get_type_props<::lidar_msgs::msg::PointXYZIRT>();
  str.set_mode(cdr_stream::stream_mode::move, key);
  return move(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool max(T& streamer, const ::lidar_msgs::msg::PointXYZIRT& instance, const entity_properties_t *props) {
  (void)instance;
  member_id_set member_ids;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.x()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.y()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.z()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 3:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.intensity()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props, member_ids);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool max(S& str, const ::lidar_msgs::msg::PointXYZIRT& instance, key_mode key) {
  const auto &props = get_type_props<::lidar_msgs::msg::PointXYZIRT>();
  str.set_mode(cdr_stream::stream_mode::max, key);
  return max(str, instance, props.data()); 
}

template<>
const propvec &get_type_props<::lidar_msgs::msg::PointCloud2>();

namespace {
  static const volatile propvec &properties___lidar_msgs__msg__PointCloud2 = get_type_props<::lidar_msgs::msg::PointCloud2>();
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool write(T& streamer, const ::lidar_msgs::msg::PointCloud2& instance, const entity_properties_t *props) {
  (void)instance;
  member_id_set member_ids;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.height()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.width()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.is_dense()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 3:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.timestamp()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 4:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.seq()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 5:
      if (!streamer.start_member(*prop))
        return false;
      if (!write_string(streamer, instance.frame_id(), 0))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 6:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, false))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.points().size());
      if (!write(streamer, se_1))
        return false;
      for (uint32_t i_1 = 0; i_1 < se_1; i_1++) {
      if (!write(streamer, instance.points()[i_1], prop))
        return false;
      }  //i_1
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props, member_ids);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool write(S& str, const ::lidar_msgs::msg::PointCloud2& instance, key_mode key) {
  const auto &props = get_type_props<::lidar_msgs::msg::PointCloud2>();
  str.set_mode(cdr_stream::stream_mode::write, key);
  return write(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool read(T& streamer, ::lidar_msgs::msg::PointCloud2& instance, const entity_properties_t *props) {
  (void)instance;
  member_id_set member_ids;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.height()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.width()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.is_dense()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 3:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.timestamp()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 4:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.seq()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 5:
      if (!streamer.start_member(*prop))
        return false;
      if (!read_string(streamer, instance.frame_id(), 0))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 6:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, false))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.points().size());
      if (!read(streamer, se_1))
        return false;
      instance.points().resize(se_1);
      for (uint32_t i_1 = 0; i_1 < se_1; i_1++) {
      if (!read(streamer, instance.points()[i_1], prop))
        return false;
      }  //i_1
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props, member_ids);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool read(S& str, ::lidar_msgs::msg::PointCloud2& instance, key_mode key) {
  const auto &props = get_type_props<::lidar_msgs::msg::PointCloud2>();
  str.set_mode(cdr_stream::stream_mode::read, key);
  return read(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool move(T& streamer, const ::lidar_msgs::msg::PointCloud2& instance, const entity_properties_t *props) {
  (void)instance;
  member_id_set member_ids;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.height()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.width()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.is_dense()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 3:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.timestamp()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 4:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.seq()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 5:
      if (!streamer.start_member(*prop))
        return false;
      if (!move_string(streamer, instance.frame_id(), 0))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 6:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, false))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.points().size());
      if (!move(streamer, se_1))
        return false;
      for (uint32_t i_1 = 0; i_1 < se_1; i_1++) {
      if (!move(streamer, instance.points()[i_1], prop))
        return false;
      }  //i_1
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props, member_ids);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool move(S& str, const ::lidar_msgs::msg::PointCloud2& instance, key_mode key) {
  const auto &props = get_type_props<::lidar_msgs::msg::PointCloud2>();
  str.set_mode(cdr_stream::stream_mode::move, key);
  return move(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool max(T& streamer, const ::lidar_msgs::msg::PointCloud2& instance, const entity_properties_t *props) {
  (void)instance;
  member_id_set member_ids;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.height()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.width()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.is_dense()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 3:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.timestamp()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 4:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.seq()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 5:
      if (!streamer.start_member(*prop))
        return false;
      if (!max_string(streamer, instance.frame_id(), 0))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 6:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, false))
        return false;
      {
      uint32_t se_1 = 0;
      if (!max(streamer, se_1))
        return false;
      for (uint32_t i_1 = 0; i_1 < se_1; i_1++) {
      if (!max(streamer, instance.points()[i_1], prop))
        return false;
      }  //i_1
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      streamer.position(SIZE_MAX);
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props, member_ids);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool max(S& str, const ::lidar_msgs::msg::PointCloud2& instance, key_mode key) {
  const auto &props = get_type_props<::lidar_msgs::msg::PointCloud2>();
  str.set_mode(cdr_stream::stream_mode::max, key);
  return max(str, instance, props.data()); 
}

} //namespace cdr
} //namespace core
} //namespace cyclonedds
} //namespace eclipse
} //namespace org

#endif // DDSCXX_POINTCLOUD2_HPP_9FA392EB84EE6D0E910EFCFF976D2269
