/****************************************************************

  Generated by Eclipse Cyclone DDS IDL to CXX Translator
  File name: /home/titan/wp/fusion_dds/idl/DDSDataMsg.idl
  Source: DDSDataMsg.hpp
  Cyclone DDS: v0.11.0

*****************************************************************/
#ifndef DDSCXX_DDSDATAMSG_HPP_E6D288FF95D7B26F7EA4B9CF9B43E672
#define DDSCXX_DDSDATAMSG_HPP_E6D288FF95D7B26F7EA4B9CF9B43E672

#include <utility>
#include <cstdint>
#include <vector>
#include <string>

class DDSData_Msg
{
private:
 std::string topic_;
 double timestamp_ = 0.0;
 std::vector<uint8_t> payload_;

public:
  DDSData_Msg() = default;

  explicit DDSData_Msg(
    const std::string& topic,
    double timestamp,
    const std::vector<uint8_t>& payload) :
    topic_(topic),
    timestamp_(timestamp),
    payload_(payload) { }

  const std::string& topic() const { return this->topic_; }
  std::string& topic() { return this->topic_; }
  void topic(const std::string& _val_) { this->topic_ = _val_; }
  void topic(std::string&& _val_) { this->topic_ = std::move(_val_); }
  double timestamp() const { return this->timestamp_; }
  double& timestamp() { return this->timestamp_; }
  void timestamp(double _val_) { this->timestamp_ = _val_; }
  const std::vector<uint8_t>& payload() const { return this->payload_; }
  std::vector<uint8_t>& payload() { return this->payload_; }
  void payload(const std::vector<uint8_t>& _val_) { this->payload_ = _val_; }
  void payload(std::vector<uint8_t>&& _val_) { this->payload_ = std::move(_val_); }

  bool operator==(const DDSData_Msg& _other) const
  {
    (void) _other;
    return topic_ == _other.topic_ &&
      timestamp_ == _other.timestamp_ &&
      payload_ == _other.payload_;
  }

  bool operator!=(const DDSData_Msg& _other) const
  {
    return !(*this == _other);
  }

};

#include "dds/topic/TopicTraits.hpp"
#include "org/eclipse/cyclonedds/topic/datatopic.hpp"

namespace org {
namespace eclipse {
namespace cyclonedds {
namespace topic {

template <> constexpr const char* TopicTraits<::DDSData_Msg>::getTypeName()
{
  return "DDSData_Msg";
}

template <> constexpr bool TopicTraits<::DDSData_Msg>::isSelfContained()
{
  return false;
}

template <> constexpr bool TopicTraits<::DDSData_Msg>::isKeyless()
{
  return true;
}

#ifdef DDSCXX_HAS_TYPELIB
template<> constexpr unsigned int TopicTraits<::DDSData_Msg>::type_map_blob_sz() { return 286; }
template<> constexpr unsigned int TopicTraits<::DDSData_Msg>::type_info_blob_sz() { return 100; }
template<> inline const uint8_t * TopicTraits<::DDSData_Msg>::type_map_blob() {
  alignas(4) static const uint8_t blob[] = {
 0x60,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0xf1,  0x8b,  0x52,  0x76,  0x9a,  0xa1,  0x41,  0x76, 
 0x9b,  0x7e,  0xc8,  0xaa,  0x2a,  0xd0,  0x7e,  0x00,  0x48,  0x00,  0x00,  0x00,  0xf1,  0x51,  0x01,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x38,  0x00,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00, 
 0x0c,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x70,  0x00,  0x9d,  0x9b,  0x68,  0xac, 
 0x0b,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0xd7,  0xe6,  0xd5,  0x5b,  0x00, 
 0x10,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x01,  0x00,  0x80,  0xf3,  0x01,  0x00,  0x00,  0x02, 
 0x32,  0x1c,  0x3c,  0xf4,  0x8e,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0xf2,  0x67,  0x53,  0x97, 
 0x09,  0xb4,  0xb2,  0xd6,  0x26,  0x58,  0xe5,  0xb6,  0xe6,  0xf2,  0x37,  0x00,  0x76,  0x00,  0x00,  0x00, 
 0xf2,  0x51,  0x01,  0x00,  0x14,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x0c,  0x00,  0x00,  0x00, 
 0x44,  0x44,  0x53,  0x44,  0x61,  0x74,  0x61,  0x5f,  0x4d,  0x73,  0x67,  0x00,  0x56,  0x00,  0x00,  0x00, 
 0x03,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x70,  0x00, 
 0x06,  0x00,  0x00,  0x00,  0x74,  0x6f,  0x70,  0x69,  0x63,  0x00,  0x00,  0x00,  0x18,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0x00,  0x0a,  0x00,  0x00,  0x00,  0x74,  0x69,  0x6d,  0x65, 
 0x73,  0x74,  0x61,  0x6d,  0x70,  0x00,  0x00,  0x00,  0x1a,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x80,  0xf3,  0x01,  0x00,  0x00,  0x02,  0x08,  0x00,  0x00,  0x00,  0x70,  0x61,  0x79,  0x6c, 
 0x6f,  0x61,  0x64,  0x00,  0x00,  0x00,  0x00,  0x00,  0x22,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00, 
 0xf2,  0x67,  0x53,  0x97,  0x09,  0xb4,  0xb2,  0xd6,  0x26,  0x58,  0xe5,  0xb6,  0xe6,  0xf2,  0x37,  0xf1, 
 0x8b,  0x52,  0x76,  0x9a,  0xa1,  0x41,  0x76,  0x9b,  0x7e,  0xc8,  0xaa,  0x2a,  0xd0,  0x7e, };
  return blob;
}
template<> inline const uint8_t * TopicTraits<::DDSData_Msg>::type_info_blob() {
  alignas(4) static const uint8_t blob[] = {
 0x60,  0x00,  0x00,  0x00,  0x01,  0x10,  0x00,  0x40,  0x28,  0x00,  0x00,  0x00,  0x24,  0x00,  0x00,  0x00, 
 0x14,  0x00,  0x00,  0x00,  0xf1,  0x8b,  0x52,  0x76,  0x9a,  0xa1,  0x41,  0x76,  0x9b,  0x7e,  0xc8,  0xaa, 
 0x2a,  0xd0,  0x7e,  0x00,  0x4c,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x02,  0x10,  0x00,  0x40,  0x28,  0x00,  0x00,  0x00,  0x24,  0x00,  0x00,  0x00, 
 0x14,  0x00,  0x00,  0x00,  0xf2,  0x67,  0x53,  0x97,  0x09,  0xb4,  0xb2,  0xd6,  0x26,  0x58,  0xe5,  0xb6, 
 0xe6,  0xf2,  0x37,  0x00,  0x7a,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00, };
  return blob;
}
#endif //DDSCXX_HAS_TYPELIB

} //namespace topic
} //namespace cyclonedds
} //namespace eclipse
} //namespace org

namespace dds {
namespace topic {

template <>
struct topic_type_name<::DDSData_Msg>
{
    static std::string value()
    {
      return org::eclipse::cyclonedds::topic::TopicTraits<::DDSData_Msg>::getTypeName();
    }
};

}
}

REGISTER_TOPIC_TYPE(::DDSData_Msg)

namespace org{
namespace eclipse{
namespace cyclonedds{
namespace core{
namespace cdr{

template<>
const propvec &get_type_props<::DDSData_Msg>();

namespace {
  static const volatile propvec &properties___DDSData_Msg = get_type_props<::DDSData_Msg>();
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool write(T& streamer, const ::DDSData_Msg& instance, const entity_properties_t *props) {
  (void)instance;
  member_id_set member_ids;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!write_string(streamer, instance.topic(), 0))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.timestamp()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.payload().size());
      if (!write(streamer, se_1))
        return false;
      if (se_1 > 0 &&
          !write(streamer, instance.payload()[0], se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props, member_ids);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool write(S& str, const ::DDSData_Msg& instance, key_mode key) {
  const auto &props = get_type_props<::DDSData_Msg>();
  str.set_mode(cdr_stream::stream_mode::write, key);
  return write(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool read(T& streamer, ::DDSData_Msg& instance, const entity_properties_t *props) {
  (void)instance;
  member_id_set member_ids;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!read_string(streamer, instance.topic(), 0))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.timestamp()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.payload().size());
      if (!read(streamer, se_1))
        return false;
      instance.payload().resize(se_1);
      if (se_1 > 0 &&
          !read(streamer, instance.payload()[0], se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props, member_ids);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool read(S& str, ::DDSData_Msg& instance, key_mode key) {
  const auto &props = get_type_props<::DDSData_Msg>();
  str.set_mode(cdr_stream::stream_mode::read, key);
  return read(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool move(T& streamer, const ::DDSData_Msg& instance, const entity_properties_t *props) {
  (void)instance;
  member_id_set member_ids;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!move_string(streamer, instance.topic(), 0))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.timestamp()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.payload().size());
      if (!move(streamer, se_1))
        return false;
      
      if (se_1 > 0 &&
          !move(streamer, uint8_t(), se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props, member_ids);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool move(S& str, const ::DDSData_Msg& instance, key_mode key) {
  const auto &props = get_type_props<::DDSData_Msg>();
  str.set_mode(cdr_stream::stream_mode::move, key);
  return move(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool max(T& streamer, const ::DDSData_Msg& instance, const entity_properties_t *props) {
  (void)instance;
  member_id_set member_ids;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!max_string(streamer, instance.topic(), 0))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.timestamp()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = 0;
      if (!max(streamer, se_1))
        return false;
      // coverity[dead_error_line]
      if (se_1 > 0 &&
          !max(streamer, uint8_t(), se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      streamer.position(SIZE_MAX);
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props, member_ids);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool max(S& str, const ::DDSData_Msg& instance, key_mode key) {
  const auto &props = get_type_props<::DDSData_Msg>();
  str.set_mode(cdr_stream::stream_mode::max, key);
  return max(str, instance, props.data()); 
}

} //namespace cdr
} //namespace core
} //namespace cyclonedds
} //namespace eclipse
} //namespace org

#endif // DDSCXX_DDSDATAMSG_HPP_E6D288FF95D7B26F7EA4B9CF9B43E672
